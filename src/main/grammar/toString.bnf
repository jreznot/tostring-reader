/*
 * Copyright © 2022 Yuriy Artamonov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the “Software”), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

{
  parserClass="org.strangeway.tsr.parser.TslParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Tsl"
  psiImplClassSuffix="Impl"
  psiPackage="org.strangeway.tsr.psi"
  psiImplPackage="org.strangeway.tsr.psi.impl"

  elementTypeHolderClass="org.strangeway.tsr.psi.TslTokenTypes"
  elementTypeClass="org.strangeway.tsr.psi.TslElementType"
  tokenTypeClass="org.strangeway.tsr.psi.TslTokenType"
  psiImplUtilClass="org.strangeway.tsr.psi.TslPsiUtils"
  tokens = [
    LBRACKET='['
    RBRACKET=']'
    LPARENTH='('
    RPARENTH=')'
    LBRACE='{'
    RBRACE='}'
    COMMA=','
    COLON=':'
    TRUE='true'
    FALSE='false'
    NULL='null'
    ASSIGN='='
    DOT='.'
    DASH='-'
  ]
}

root ::= value

value ::= stringLiteral | numberLiteral | booleanLiteral | nullLiteral | objectRef |
    objectBrace | objectParenth | objectBracket |
    fallbackStringLiteral |
    objectId | list | map |

objectRef ::= IDENTIFIER STRUDEL_HEX {
    pin = 2
    extends = value
}

objectId ::= IDENTIFIER {
    extends = value
}

private propertiesList ::= propertyKeyValue*

propertyKeyValue ::= propertyKey ASSIGN value (COMMA|&(RPARENTH|RBRACKET|RBRACE)) {
    pin = 2
    recoverWhile = notRCloseOrNextValue
}

fake object ::= objectName propertiesList? {
    extends = value
}

objectParenth ::= objectName LPARENTH propertiesList RPARENTH {
    pin = 2
    extends = object
}

objectBrace ::= objectName LBRACE propertiesList RBRACE {
    pin = 2
    extends = object
}

objectBracket ::= objectName LBRACKET propertiesList RBRACKET {
    pin = 2
    extends = object
}

objectName ::= IDENTIFIER

propertyKey ::= IDENTIFIER

list ::= LBRACKET listItem* RBRACKET {
    pin = 1
    extends = value
}

private listItem ::= value (COMMA|&RBRACKET) {
    pin = 1
    recoverWhile = notRBracketOrNextValue
}

map ::= LBRACE mapItem* RBRACE {
    pin = 1
}

mapItem ::= mapKey ASSIGN value (COMMA|&RBRACE) {
    pin = 2
    recoverWhile = notRBraceOrNextValue
}

mapKey ::= nullLiteral | booleanLiteral | numberLiteral | objectRef | fallbackStringLiteral | objectId

booleanLiteral ::= TRUE | FALSE {
    extends = value
}

numberLiteral ::= NUMBER {
    extends = value
}

stringLiteral ::= DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING {
    extends = value
}

fallbackStringLiteral ::= fallbackItem fallbackItem+ {
    pin = 2
    extends = value
}

private fallbackItem ::= IDENTIFIER | NUMBER | TRUE | FALSE | NULL | DOT | DASH

nullLiteral ::= NULL {
    extends = value
}

private notRBracketOrNextValue ::= !(RBRACKET|value)
private notRBraceOrNextValue ::= !(RBRACE|value)
private notRCloseOrNextValue ::= !(RPARENTH|RBRACE|RBRACKET|value)
